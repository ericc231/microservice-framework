package blog.eric231.examples.mtlsprovider;

import blog.eric231.examples.mtlsprovider.domain.Certificate;
import blog.eric231.examples.mtlsprovider.domain.CertificateRepository;
import blog.eric231.examples.mtlsprovider.domain.CertificateStatus;
import blog.eric231.examples.mtlsprovider.service.CertificateService;
import blog.eric231.examples.mtlsprovider.process.CertificateManagementProcess;
import blog.eric231.examples.mtlsprovider.process.CertificateRegisterProcess;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("test")
@Transactional
public class MtlsProviderIntegrationTest {

    @Autowired
    private CertificateRepository certificateRepository;

    @Autowired
    private CertificateService certificateService;

    @Autowired
    private CertificateManagementProcess certificateManagementProcess;

    @Autowired
    private CertificateRegisterProcess certificateRegisterProcess;

    private ObjectMapper objectMapper = new ObjectMapper();

    private static final String SAMPLE_CERTIFICATE = 
        "-----BEGIN CERTIFICATE-----\n" +
        "MIIDXTCCAkWgAwIBAgIJAKZpYqRhJCOdMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n" +
        "BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX\n" +
        "aWRnaXRzIFB0eSBMdGQwHhcNMjMwMTAxMDAwMDAwWhcNMjQwMTAxMDAwMDAwWjBF\n" +
        "MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50\n" +
        "ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\n" +
        "CgKCAQEAwUXY4UDHH6aeJi7X4wJhzqfr5PpP2ByQ6JOb8zG7L9C5Y1d6K8G3h4A9\n" +
        "fOYz8E6J2YNi5y6h9hzC4D5K8k1M6uP7vJ5lPo9D8F6n3c0z6M4Q2rT8U9b1k5W\n" +
        "3g2Y8wF1j7l4S5t6H7i8R9q2N1m5P4k7L3b8V6c9E4d1T2a3G8h5I6j7K8l9M0n\n" +
        "1o2P3q4R5s6T7u8V9w0X1y2Z3a4B5c6D7e8F9g0H1i2J3k4L5m6N7o8P9q0R1s2\n" +
        "T3u4V5w6X7y8Z9a0B1c2D3e4F5g6H7i8J9k0L1m2N3o4P5q6R7s8T9u0V1w2X3y\n" +
        "4Z5a6B7c8D9e0F1g2H3i4J5k6L7m8N9o0P1q2R3s4T5u6V7w8X9y0Z1a2B3c4D5e\n" +
        "6F7g8H9iQIDAQABo1AwTjAdBgNVHQ4EFgQU6tN5/6Y3n6J2F4a7z8K9mPqN3LI=\n" +
        "MB8GA1UdIwQYMBaAFOrTef+mN5+idheGu8/CvZj6jdyyMA0GCSqGSIb3DQEBCwUA\n" +
        "A4IBAQCR5Y8l3n8D6p7R2i4t6u7W9z0a2b4c5D6E7F8G9H0I1J2K3L4M5N6O7P8Q\n" +
        "9R0S1T2U3V4W5X6Y7Z8A9B0C1D2E3F4G5H6I7J8K9L0M1N2O3P4Q5R6S7T8U9V0W\n" +
        "1X2Y3Z4A5B6C7D8E9F0G1H2I3J4K5L6M7N8O9P0Q1R2S3T4U5V6W7X8Y9Z0A1B2C\n" +
        "3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z6A7B8C9D0E1F2G3H4I\n" +
        "-----END CERTIFICATE-----";

    @BeforeEach
    void setUp() {
        certificateRepository.deleteAll();
    }

    @Test
    void testCertificateEntity() {
        Certificate certificate = new Certificate();
        certificate.setSubjectDN("CN=Test Subject");
        certificate.setIssuerDN("CN=Test Issuer");
        certificate.setSerialNumber("123456");
        certificate.setCertificateData("test cert data");
        certificate.setValidFrom(LocalDateTime.now());
        certificate.setValidTo(LocalDateTime.now().plusYears(1));
        certificate.setFingerprintSha256("test-fingerprint");
        certificate.setStatus(CertificateStatus.ACTIVE);

        Certificate saved = certificateRepository.save(certificate);
        
        assertNotNull(saved.getId());
        assertNotNull(saved.getCreatedAt());
        assertEquals("CN=Test Subject", saved.getSubjectDN());
        assertEquals(CertificateStatus.ACTIVE, saved.getStatus());
        assertTrue(saved.isValid());
        assertFalse(saved.isExpired());
    }

    @Test
    void testCertificateRepository() {
        Certificate cert1 = createTestCertificate("CN=Test1", "12345", "fingerprint1");
        Certificate cert2 = createTestCertificate("CN=Test2", "67890", "fingerprint2");
        
        certificateRepository.save(cert1);
        certificateRepository.save(cert2);

        assertEquals(2, certificateRepository.findAll().size());
        assertTrue(certificateRepository.existsBySubjectDN("CN=Test1"));
        assertTrue(certificateRepository.existsByFingerprintSha256("fingerprint1"));
        assertEquals(2, certificateRepository.countByStatus(CertificateStatus.ACTIVE));
    }

    @Test
    void testCertificateRegisterProcess() {
        JsonNode request = objectMapper.createObjectNode()
            .put("certificate", SAMPLE_CERTIFICATE);
        
        JsonNode response = certificateRegisterProcess.handle(request);
        
        // Note: This test will fail because the sample certificate is not a valid BouncyCastle parseable cert
        // In a real scenario, you would use a properly formatted certificate
        assertFalse(response.get("success").asBoolean());
        assertTrue(response.get("message").asText().contains("Error registering certificate"));
    }

    @Test
    void testCertificateRegisterProcessWithMissingData() {
        JsonNode request = objectMapper.createObjectNode();
        
        JsonNode response = certificateRegisterProcess.handle(request);
        
        assertFalse(response.get("success").asBoolean());
        assertEquals("Certificate data is required", response.get("message").asText());
    }

    @Test
    void testCertificateRegisterProcessWithInvalidFormat() {
        JsonNode request = objectMapper.createObjectNode()
            .put("certificate", "invalid certificate data");
        
        JsonNode response = certificateRegisterProcess.handle(request);
        
        assertFalse(response.get("success").asBoolean());
        assertEquals("Invalid certificate format. PEM format required.", response.get("message").asText());
    }

    @Test
    void testCertificateManagementProcessList() {
        createAndSaveTestCertificates();
        
        JsonNode request = objectMapper.createObjectNode()
            .put("action", "list");
        
        JsonNode response = certificateManagementProcess.handle(request);
        
        assertTrue(response.get("success").asBoolean());
        assertEquals(3, response.get("count").asInt());
        assertTrue(response.has("certificates"));
    }

    @Test
    void testCertificateManagementProcessActive() {
        createAndSaveTestCertificates();
        
        JsonNode request = objectMapper.createObjectNode()
            .put("action", "active");
        
        JsonNode response = certificateManagementProcess.handle(request);
        
        assertTrue(response.get("success").asBoolean());
        assertEquals(2, response.get("count").asInt());
    }

    @Test
    void testCertificateManagementProcessRevoke() {
        Certificate cert = createTestCertificate("CN=Test", "12345", "fingerprint");
        Certificate saved = certificateRepository.save(cert);
        
        JsonNode request = objectMapper.createObjectNode()
            .put("action", "revoke")
            .put("certificateId", saved.getId())
            .put("reason", "Test revocation");
        
        JsonNode response = certificateManagementProcess.handle(request);
        
        assertTrue(response.get("success").asBoolean());
        assertEquals("Certificate revoked successfully", response.get("message").asText());
        
        Certificate revoked = certificateRepository.findById(saved.getId()).get();
        assertEquals(CertificateStatus.REVOKED, revoked.getStatus());
        assertEquals("Test revocation", revoked.getRevocationReason());
    }

    @Test
    void testCertificateStatus() {
        Certificate cert = createTestCertificate("CN=Test", "12345", "fingerprint");
        cert.setValidTo(LocalDateTime.now().minusDays(1)); // Expired
        
        assertTrue(cert.isExpired());
        assertFalse(cert.isValid());
        
        cert.revoke("Manual revocation");
        assertEquals(CertificateStatus.REVOKED, cert.getStatus());
        assertNotNull(cert.getRevokedAt());
        assertEquals("Manual revocation", cert.getRevocationReason());
    }

    @Test
    void testProviderAnnotation() {
        assertTrue(certificateService.getClass().isAnnotationPresent(
            blog.eric231.examples.mtlsprovider.annotation.Provider.class));
        
        blog.eric231.examples.mtlsprovider.annotation.Provider annotation = 
            certificateService.getClass().getAnnotation(
                blog.eric231.examples.mtlsprovider.annotation.Provider.class);
        
        assertEquals("mtls-certificate-provider", annotation.value());
        assertEquals("mTLS Certificate Management Provider", annotation.description());
        assertEquals("mtls", annotation.authType());
    }

    private Certificate createTestCertificate(String subjectDN, String serialNumber, String fingerprint) {
        Certificate certificate = new Certificate();
        certificate.setSubjectDN(subjectDN);
        certificate.setIssuerDN("CN=Test CA");
        certificate.setSerialNumber(serialNumber);
        certificate.setCertificateData("test cert data");
        certificate.setValidFrom(LocalDateTime.now());
        certificate.setValidTo(LocalDateTime.now().plusYears(1));
        certificate.setFingerprintSha256(fingerprint);
        certificate.setStatus(CertificateStatus.ACTIVE);
        return certificate;
    }

    private void createAndSaveTestCertificates() {
        Certificate cert1 = createTestCertificate("CN=Active1", "11111", "fp1");
        Certificate cert2 = createTestCertificate("CN=Active2", "22222", "fp2");
        Certificate cert3 = createTestCertificate("CN=Revoked", "33333", "fp3");
        cert3.setStatus(CertificateStatus.REVOKED);
        
        certificateRepository.save(cert1);
        certificateRepository.save(cert2);
        certificateRepository.save(cert3);
    }
}